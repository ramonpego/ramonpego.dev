// | FLEXBOX |

/* | DISPLAY |
    -> Torna o elemento um flex container automaticamente transformando todos os seus filhos diretos em flex itens.
*/

@mixin display__flex {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}

/* | FEX DIRECTION |
    -> Define a direção dos flex itens.
    -> Por padrão ele é row (linha), por isso quando o display: flex; é adicionado, os elementos ficam em linha, um do lado do outro.
*/

@mixin flex__direction($direction: row) {
        // Os itens ficam em linha
    @if ($direction == row) {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: normal;
        -ms-flex-direction: row;
        flex-direction: row;

        // Os itens ficam em linha reversa, ou seja 3, 2, 1.
    } @else if ($direction == row-reverse) {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: reverse;
        -ms-flex-direction: row-reverse;
        flex-direction: row-reverse;

        // Os itens ficam em uma única coluna, um embaixo do outro.
    } @else if ($direction == column) {
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column

        // Os itens ficam em uma única coluna, um embaixo do outro, porém em ordem reversa: 3, 2 e 1.
    } @else if ($direction == column-reverse) {
        -webkit-box-orient: vertical;
        -webkit-box-direction: reverse;
        -ms-flex-direction: column-reverse;
        flex-direction: column-reverse;
    }
}

/* | FLEX WRAP |
    -> Define se os itens devem quebrar ou não a linha. Por padrão eles não quebram linha.
*/

@mixin flex__wrap($wrap: nowrap) {
        // Valor padrão, não permite a quebra de linha.
    @if ($wrap == nowrap) {
        -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;

        // Quebra a linha assim que um dos flex itens não puder mais ser compactado.
    } @else if ($wrap == wrap) {
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;

        // Quebra a linha assim que um dos flex itens não puder mais ser compactado. A quebra é na direção contrária, ou seja para a linha acima.
    } @else if ($wrap == wrap-reverse) {
        -ms-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
    }
}

/* | FLEX FLOW |
    -> O flex-flow é um atalho para as propriedades flex-direction e flex-wrap.
*/

@mixin flex__flow($flow) {
    // Coloca o conteúdo em linha e não permite a quebra de linha.
    @if ($flow == row nowrap) {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: normal;
        -ms-flex-flow: row nowrap;
        flex-flow: row nowrap;

        // Coloca o conteúdo em linha e permite a quebra de linha.
    } @else if ($flow == row wrap) {
        -ms-flex-flow: row wrap;
        flex-flow: row wrap;

        // Coloca o conteúdo em coluna e não permite a quebra de linha.
    } @else if ($flow == column nowrap) {
        -ms-flex-flow: column nowrap;
        flex-flow: column nowrap;
    }
}

/* | JUSTIFY CONTENT |
    -> Alinha os itens flex no container de acordo com a direção.
    -> A propriedade só funciona se os itens atuais não ocuparem todo o container.
    -> Isso significa que ao definir flex: 1; ou algo similar nos itens, a propriedade não terá mais função.
*/

@mixin justify__content($justify) {
        // Alinha os itens ao início do container.
    @if ($justify == start) {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
        justify-content: flex-start;

        // Alinha os itens ao final do container.
    } @else if ($justify == end) {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
        justify-content: flex-end;

        // Alinha os itens ao centro do container.
    } @else if ($justify == center) {
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;

        // Cria um espaçamento igual entre os elementos. Mantendo o primeiro grudado no início e o último no final.
    } @else if ($justify == between) {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
        justify-content: space-between;

        // Cria um espaçamento entre os elementos. Os espaçamentos do meio são duas vezes maiores que o inicial e final.
    } @else if ($justify == around) {
        -ms-flex-pack: distribute;
        justify-content: space-around;
    }
}

/* | ALIGN ITEMS |
    -> O align-items alinha os flex itens de acordo com o eixo do container.
    -> O alinhamento é diferente para quando os itens estão em colunas ou linhas.
*/

@mixin align__items($align: stretch) {
        // Valor padrão, ele que faz com que os flex itens cresçam igualmente.
    @if ($align == stretch) {
        -webkit-box-align: stretch;
        -ms-flex-align: stretch;
        align-items: stretch;

        // Alinha os itens ao início.
    } @else if ($align == start) {
        -webkit-box-align: start;
        -ms-flex-align: start;
        align-items: flex-start;

        // Alinha os itens ao centro.
    } @else if ($align == center) {
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;

        // Alinha os itens ao final.
    } @else if ($align == end) {
        -webkit-box-align: end;
        -ms-flex-align: end;
        align-items: flex-end;

        // Alinha os itens de acordo com a linha base da tipografia.
    } @else if ($align == baseline) {
        -webkit-box-align: baseline;
        -ms-flex-align: baseline;
        align-items: baseline;
    }
}

/* | ALIGN CONTENT |
    -> Alinha as linhas do container em relação ao eixo vertical.
    -> A propriedade só funciona se existir mais de uma linha de flex-itens. Para isso o flex-wrap precisa ser wrap.
*/

@mixin align__content($align: stretch) {
    // Valor padrão, ele que faz com que os flex itens cresçam igualmente na vertical.
    @if ($align == stretch) {
        -ms-flex-line-pack: stretch;
        align-content: stretch;

        // Alinha todas as linhas de itens ao início.
    } @else if ($align == start) {
        -ms-flex-line-pack: start;
        align-content: flex-start;

        // Alinha todas as linhas de itens ao final.
    } @else if ($align == end) {
        -ms-flex-line-pack: end;
        align-content: flex-end;

        // Alinha todas as linhas de itens ao centro.
    } @else if ($align == center) {
        -ms-flex-line-pack: center;
        align-content: center;

        // Cria um espaçamento igual entre as linhas. Mantendo a primeira grudada no topo e a última no bottom.
    } @else if ($align == between) {
        -ms-flex-line-pack: justify;
        align-content: space-between;

        // Cria um espaçamento entre as linhas. Os espaçamentos do meio são duas vezes maiores que o top e bottom.
    } @else if ($align == around) {
        -ms-flex-line-pack: distribute;
        align-content: space-around;
    }
}

/* | ALIGN SELF |
    -> O align-self serve para definirmos o alinhamento específico de um único flex item dentro do nosso container.
    -> Caso um valor seja atribuído, ele passara por cima do que for atribuído no align-items do container.
*/

@mixin align__self($align: auto) {
        // Valor inicial padrão. Vai respeitar o que for definido pelo align-items no flex-container.
    @if ($align == auto) {
        -ms-flex-item-align: auto;
        -ms-grid-row-align: auto;
        align-self: auto;

        // Alinha o item ao início.
    } @else if ($align == start) {
        -ms-flex-item-align: start;
        align-self: flex-start;

        // Alinha o item ao final.
    } @else if ($align == end) {
        -ms-flex-item-align: end;
        align-self: flex-end;

        // Alinha o item ao centro.
    } @else if ($align == center) {
        -ms-flex-item-align: center;
        -ms-grid-row-align: center;
        align-self: center;

        // Alinha o item a linha de base.
    } @else if ($align == baseline) {
        -ms-flex-item-align: baseline;
        align-self: baseline;

        // Estica o item.
    } @else if ($align == stretch) {
        -ms-flex-item-align: stretch;
        -ms-grid-row-align: stretch;
        align-self: stretch;
    }
}

/* | FLEX GROW |
    -> Define a habilidade de um flex item crescer.
    -> Por padrão o valor é zero, assim os flex itens ocupam um tamanho máximo relacionado o conteúdo interno deles ou ao width definido.
*/

@mixin flex__grow($grow: 0) {
    -webkit-box-flex: $grow;
    -ms-flex-positive: $grow;
    flex-grow: $grow;
}

/* | FLEX BASIS |
    -> Indica o tamanho inicial do flex item antes da distribuição do espaço restante.
*/

@mixin flex__basis($basis: auto) {
    -ms-flex-preferred-size: $basis;
    flex-basis: $basis;
}

/* | FLEX SHRINK |
    -> Valor padrão, permite que os itens tenham os seus tamanhos (seja esse tamanho definido a partir de width ou flex-basis) reduzidos para caber no container.
    -> Não permite a diminuição dos itens, assim um item com flex-basis: 18.75rem; nunca diminuirá menos do que 18.75rem, mesmo que o conteúdo não ocupe todo esse espaço.
    -> Um item com shrink: 3 diminuirá 3 vezes mais que um item com 1.
*/

@mixin flex__shrink($shrink: 1) {
    -ms-flex-negative: $shrink;
    flex-shrink: $shrink;
}

/* | FLEX |
    -> Atalho para as propriedades flex-grow, flex-shrink e flex-basis.
    -> Geralmente você verá a propriedade flex nos flex itens ao invés de cada um dos valores separados.
*/

@mixin flex__($flex: 0 1 auto) {
    -webkit-box-flex: $flex;
    -ms-flex: $flex;
    flex: $flex;
}

/* | ORDER |
    -> Modifica a ordem dos flex itens.
    -> Sempre do menor para o maior, assim order: 1, aparece na frente de order: 5.
*/

@mixin order__($order: 0) {
    -webkit-box-ordinal-group: $order;
    -ms-flex-order: $order;
    order: $order;
}
