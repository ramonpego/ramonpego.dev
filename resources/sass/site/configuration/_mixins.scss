// | FLEXBOX |
@mixin display {
    // Torna o elemento um flex container automaticamente transformando todos os seus filhos diretos em flex itens.
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}

@mixin align ($align) {
        // Valor padrão, ele que faz com que os flex itens cresçam igualmente.
    @if ($align == stretch) {
        -webkit-box-align: stretch;
        -ms-flex-align: stretch;
        align-items: stretch;

        // Alinha os itens ao início.
    } @else if ($align == start) {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
        align-content: flex-start;

        // Alinha os itens ao centro.
    } @else if ($align == center) {
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;

        // Alinha os itens ao final.
    } @else if ($align == end) {
        -webkit-box-align: end;
        -ms-flex-align: end;
        align-items: flex-end;

        // Alinha os itens de acordo com a linha base da tipografia.
    } @else if ($align == baseline) {
        -webkit-box-align: baseline;
        -ms-flex-align: baseline;
        align-items: baseline;
    }
}

@mixin justify ($align) {
        // Alinha os itens ao início do container.
    @if ($align == start) {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
        justify-content: flex-start;

        // Alinha os itens ao final do container.
    } @else if ($align == end) {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
        justify-content: flex-end;

        // Alinha os itens ao centro do container.
    } @else if ($align == center) {
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;

        // Cria um espaçamento igual entre os elementos. Mantendo o primeiro grudado no início e o último no final.
    } @else if ($align == between) {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
        justify-content: space-between;

        // Cria um espaçamento entre os elementos. Os espaçamentos do meio são duas vezes maiores que o inicial e final.
    } @else if ($align == around) {
        -ms-flex-pack: distribute;
        justify-content: space-around;
    }
}

@mixin flex_direction ($direction) {
        // Os itens ficam em linha
    @if ($direction == row) {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: normal;
        -ms-flex-direction: row;
        flex-direction: row;

        // Os itens ficam em linha reversa, ou seja 3, 2, 1.
    } @else if ($direction == row-reverse) {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: reverse;
        -ms-flex-direction: row-reverse;
        flex-direction: row-reverse;

        // Os itens ficam em uma única coluna, um embaixo do outro.
    } @else if ($direction == collumn) {
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column

        // Os itens ficam em uma única coluna, um embaixo do outro, porém em ordem reversa: 3, 2 e 1.
    } @else if ($direction == column-reverse) {
        -webkit-box-orient: vertical;
        -webkit-box-direction: reverse;
        -ms-flex-direction: column-reverse;
        flex-direction: column-reverse;
    }
}

@mixin flex_wrap ($wrap) {
        // Valor padrão, não permite a quebra de linha.
    @if ($wrap == nowrap) {
        -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;

        // Quebra a linha assim que um dos flex itens não puder mais ser compactado.
    } @else if ($wrap == wrap) {
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;

        // Quebra a linha assim que um dos flex itens não puder mais ser compactado. A quebra é na direção contrária, ou seja para a linha acima.
    } @else if ($wrap == wrap-reverse) {
        -ms-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
    }
}

@mixin flex ($flex) {
    -webkit-box-flex: $flex;
    -ms-flex: $flex;
    flex: $flex;
}

// | TRUNCATE |
@mixin truncate($truncation) {
    max-width: $truncation;
    white-space: nowrap;
    overflow: hidden;
    -o-text-overflow: ellipsis;
    text-overflow: ellipsis;
}

// | PLACEHOLDER |
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// | SHADOW |
@mixin shadow($shadow, $type: box) {
    -webkit-box-shadow: $shadow;
    box-shadow: $shadow;

    @if ($type == text) {
        text-shadow: $shadow;
    }
}
